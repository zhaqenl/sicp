#lang sicp

#| Exercise 1.14: Draw the tree illustrating the process generated by the count-change procedure of
1.2.2 in making change for 11 cents. What are the orders of growth of the space and number of steps
used by this process as the amount to be changed increases?

(cc 1 5)                                                      cc 1 5
                                                           cc 1 4     0
(+ (cc 1 4)                                             cc 1 3    0      
   (cc (- 1 50) 5))                                  cc 1 2    0           
                                                  cc 1 1    0                  
(+ (+ (cc 1 3)                                   0      1                       
      (cc (- 1 25) 4))            
   (cc (- 1 50) 5))

(+ (+ (+ (cc 1 2)
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ (cc 1 1)
            (cc (- 1 5) 2))
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ (+ (cc 1 0)
               (cc (- 1 1) 1))
            (cc (- 1 5) 2))
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ (+ 0
               (cc (- 1 1) 1))
            (cc (- 1 5) 2))
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ (+ 0
               (cc 0 1))
            (cc (- 1 5) 2))
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ (+ 0
               1)
            (cc (- 1 5) 2))
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ 1
            (cc (- 1 5) 2))
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ 1
            (cc -4 2))
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ (+ 1
            0)
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ 1
         (cc (- 1 10) 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ 1
         (cc -9 3))
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ (+ 1
         0)
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ 1
      (cc (- 1 25) 4))
   (cc (- 1 50) 5))

(+ (+ 1
      (cc -24 4))
   (cc (- 1 50) 5))

(+ (+ 1
      0)
   (cc (- 1 50) 5))

(+ 1
   (cc (- 1 50) 5))

(+ 1
   (cc -49 5))

(+ 1
   0) 

20 steps

1


(cc 2 5)

(+ (cc 2 4)
   (cc (- 2 50) 5))

(+ (+ (cc 2 3)
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (cc 2 2)
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (cc 2 1)
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ (cc 2 0)
               (cc (- 2 1) 1))
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ 0
               (cc (- 2 1) 1))
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ 0
               (cc 1 1))
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ 0
               (+ (cc 1 0)
                  (cc (- 1 1) 1)))
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ 0
               (+ 0
                  (cc (- 1 1) 1)))
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ 0
               (+ 0
                  (cc 0 1)))
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ 0
               (+ 0
                  1))
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ (+ 0
               1)
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ 1
            (cc (- 2 5) 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ 1
            (cc -3 2))
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ (+ 1
            0)
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ 1
         (cc (- 2 10) 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ 1
         (cc -8 3))
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ (+ 1
         0)
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ 1
      (cc (- 2 25) 4))
   (cc (- 2 50) 5))

(+ (+ 1
      (cc -23 4))
   (cc (- 2 50) 5))

(+ (+ 1
      0)
   (cc (- 2 50) 5))

(+ 1
   (cc (- 2 50) 5))

(+ 1
   (cc -48 5))

(+ 1
   0)

24 steps

1

As you can see, we tried the 'cc' function with a base amount of 1 (because going with an amount
that is <= 0 will give us the base case immediately)

Let's proceed to drawing the tree when given an amount of 11 cents:

                                            (cc 11 5)
                                   (cc 11 4)         0 
                          (cc 11 3)         0
                 (cc 11 2)         (cc 1 3)
        (cc 11 1)        (cc 6 2)  1      0
        0 (cc 10 1)      1 (cc 1 2)
         0 (cc 9 1)        1      0
          0 (cc 8 1)
           0 (cc 7 1)
            0 (cc 6 1)
             0 (cc 5 1)
              0 (cc 4 1)
               0 (cc 3 1)
                0 (cc 2 1)
                 0 (cc 1 1)
                  0 1                          

So, by adding the 1's at the tip of the branches, we now get 4 as the answer to (cc 11 5). Based on
the order of growth of the recursive version of the factorial function and the pattern we
established when we tested (c 1 5) and (c 2 5), both the steps and space required for the process of
counting change based on the process definition, grows as Î¸(n).  
|#

(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) 
             (= kinds-of-coins 0)) 
         0)
        (else 
         (+ (cc amount (- kinds-of-coins 1))
            (cc (- amount (first-denomination 
                           kinds-of-coins))
                kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
