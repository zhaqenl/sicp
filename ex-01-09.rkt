#lang sicp

#| Exercise 1.9: Each of the following two procedures defines a method for adding two positive integers
in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its
argument by 1.

1. 
define (+ a b)
(if (= a 0) 
    b 
    (inc (+ (dec a) b)))

2.
(define (+ a b)
  (if (= a 0) 
      b 
      (+ (dec a) (inc b))))

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4
5). Are these processes iterative or recursive?

1.
(+ 4 5)

(if (= 4 0)
    5
    (inc (+ (dec 4) 5)))

(if #f
    5
    (inc (+ (dec 4) 5)))

(inc (+ (dec 4) 5))

(inc (+ 3 5))

(inc (if (= 3 0)
         5
         (inc (+ (dec 3) 5))))

(inc (if #f
         5
         (inc (+ (dec 3) 5))))

(inc (inc (+ (dec 3) 5)))

(inc (inc (+ 2 5)))

(inc (inc (if (= 2 0)
              5
              (inc (+ (dec 2) 5)))))

(inc (inc (if #f
              5
              (inc (+ (dec 2) 5)))))

(inc (inc (inc (+ (dec 2) 5))))

(inc (inc (inc (+ 1 5))))

(inc (inc (inc (if (= 1 0)
                   b
                   (inc (+ (dec 1) 5))))))

(inc (inc (inc (if #f
                   b
                   (inc (+ (dec 1) 5))))))

(inc (inc (inc (inc (+ (dec 1) 5)))))

(inc (inc (inc (inc (+ 0 5)))))

(inc (inc (inc (inc (if (= 0 0)
                        5
                        (inc (+ (dec 0) 5)))))))

(inc (inc (inc (inc (if #t
                        5
                        (inc (+ (dec 0) 5)))))))

(inc (inc (inc (inc 5))))

(inc (inc (inc 6)))

(inc (inc 7))

(inc 8)

9

2.
(+ 4 5)

(if (= 4 0)
    5
    (+ (dec 4) (inc 5)))

(if #f
    5
    (+ (dec 4) (inc 5)))

(+ (dec 4) (inc 5))

(+ 3 (inc 5))

(+ 3 6)

(if (= 3 0)
    6
    (+ (dec 3) (inc 6)))

(if #f
    6
    (+ (dec 3) (inc 6)))

(+ (dec 3) (inc 6))

(+ 2 (inc 6))

(+ 2 7)

(if (= 2 0)
    7
    (+ (dec 2) (inc 7)))

(if #f
    7
    (+ (dec 2) (inc 7)))

(+ (dec 2) (inc 7))

(+ 1 (inc 7))

(+ 1 8)

(if (= 1 0)
    8
    (+ (dec 1) (inc 8)))

(if #f
    8
    (+ (dec 1) (inc 8)))

(+ (dec 1) (inc 8))

(+ 0 9)

(if (= 0 0)
    9
    (+ (dec 0) (inc 9)))

(if #t
    9
    (+ (dec 0) (inc 9)))

9

From what we see from the illustrations above using the substitution model, the first procedure
definition shows that the process is recursive because of the illustrated expansion and contraction
of the shape of the process. We can see the deferred computations in the first example’s
substitution illustration through the ever-expanding (inc (inc ...)).

For the second procedure definition, the process is iterative because there is no such expansion
then contraction. The key is in the “else” clause of the second procedure because the sort-of
primitive procedure “inc” is “outside” the else clause, but due to the applicative method of
evaluation, we have to first evaluate the arguments themselves up until we are left with operands
that don’t need further evaluation (this explanation also proves true for the previous paragraph
because the opposite is true (the compound procedure “+” is outside the else clause)). Until then,
we keep expanding.
|#
