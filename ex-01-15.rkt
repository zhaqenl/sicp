#lang sicp

#| Exercise 1.15: The sine of an angle (specified in radians) can be computed by making use of the
approximation sin x ≃ x if x is sufficiently small, and the trigonometric identity:

sin x = (- (* 3 (sin (/ x 3))) (*4 (sin^3 (/ x 3))))

to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered
“sufficiently small” if its magnitude is not greater than 0.1 radians.) These ideas are incorporated
in the following procedures:

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

1. How many times is the procedure p applied when (sine 12.5) is evaluated?

2. What is the order of growth in space and number of steps (as a function a) used by the process
generated by the sine procedure when (sine a) is evaluated?  


“Function Fixpoint”

Quick Trivia!:

In the introduction of the problem statement, it states that sin x ≃ x, provided that, x is small
enough. When it comes to a point that the value of a variable x doesn’t change anymore when a
particular function is applied to it, the unchanging x is what we now call the 'fixpoint' of that
particular function. For example, open up your calculator, take the cosine function, and then apply
it to 0. Keep pressing the cosine button and you’ll probably find yourself stuck to a number close
to 0.739 as time passes by. 0.739 is now what we call the fixpoint of the cosine function.

Anyway, let’s proceed to the evaluation of (sine 12.5):

(sine 12.5)

(if (not (> (abs 12.5) 0.1))
    12.5
    (p (sine (/ 12.5 3.0))))

(if (not (> 12.5 0.1))
    12.5
    (p (sine (/ 12.5 3.0))))

(if (not #t)
    12.5
    (p (sine (/ 12.5 3.0))))

(if #f
    12.5
    (p (sine (/ 12.5 3.0))))

(p (sine (/ 12.5 3.0)))

(p (sine 4.166666666666667))

(p (if (not (> (abs 4.166666666666667) 0.1))
       4.166666666666667
       (p (sine (/ 4.166666666666667 3.0)))))

(p (if (not (> 4.166666666666667 0.1))
       4.166666666666667
       (p (sine (/ 4.166666666666667 3.0)))))

(p (if (not #t)
       4.166666666666667
       (p (sine (/ 4.166666666666667 3.0)))))

(p (if #f
       4.166666666666667
       (p (sine (/ 4.166666666666667 3.0)))))

(p (p (sine (/ 4.166666666666667 3.0))))

(p (p (sine 1.388888888888889)))

(p (p (if (not (> (abs 1.388888888888889) 0.1))
          1.388888888888889
          (p (sine (/ 1.388888888888889 3.0))))))

(p (p (if (not (> 1.388888888888889 0.1))
          1.388888888888889
          (p (sine (/ 1.388888888888889 3.0))))))

(p (p (if (not #t)
          1.388888888888889
          (p (sine (/ 1.388888888888889 3.0))))))

(p (p (if #f
          1.388888888888889
          (p (sine (/ 1.388888888888889 3.0))))))

(p (p (p (sine (/ 1.388888888888889 3.0)))))

(p (p (p (sine 0.462962962962963))))

(p (p (p (if (not (> (abs 0.462962962962963) 0.1))
             0.462962962962963
             (p (sine (/ 0.462962962962963 3.0)))))))

(p (p (p (if (not (> 0.462962962962963 0.1))
             0.462962962962963
             (p (sine (/ 0.462962962962963 3.0)))))))

(p (p (p (if (not #t)
             0.462962962962963
             (p (sine (/ 0.462962962962963 3.0)))))))

(p (p (p (if #f
             0.462962962962963
             (p (sine (/ 0.462962962962963 3.0)))))))

(p (p (p (p (sine (/ 0.462962962962963 3.0))))))

(p (p (p (p (sine 0.154320987654321)))))

(p (p (p (p (if (not (> (abs 0.154320987654321) 0.1))
                0.154320987654321
                (p (sine (/ 0.154320987654321 3.0))))))))

(p (p (p (p (if (not (> 0.154320987654321 0.1))
                0.154320987654321
                (p (sine (/ 0.154320987654321 3.0))))))))

(p (p (p (p (if (not #t)
                0.154320987654321
                (p (sine (/ 0.154320987654321 3.0))))))))

(p (p (p (p (if #f
                0.154320987654321
                (p (sine (/ 0.154320987654321 3.0))))))))

(p (p (p (p (p (sine (/ 0.154320987654321 3.0)))))))

(p (p (p (p (p (sine 0.051440329218107005))))))

(p (p (p (p (p (if (not (> (abs 0.051440329218107005) 0.1))
                   0.051440329218107005
                   (p (sine (/ 0.051440329218107005 3.0)))))))))

(p (p (p (p (p (if (not (> 0.051440329218107005 0.1))
                   0.051440329218107005
                   (p (sine (/ 0.051440329218107005 3.0)))))))))

(p (p (p (p (p (if (not #f)
                   0.051440329218107005
                   (p (sine (/ 0.051440329218107005 3.0)))))))))

(p (p (p (p (p (if #t
                   0.051440329218107005
                   (p (sine (/ 0.051440329218107005 3.0)))))))))

(p (p (p (p (p 0.051440329218107005)))))

(p (p (p (p (- (* 3 0.051440329218107005) (* 4 (cube 0.051440329218107005)))))))

(p (p (p (p (- 0.154320987654321 (* 4 (cube 0.051440329218107005)))))))

(p (p (p (p (- 0.154320987654321 (* 4 (* 0.051440329218107005 0.051440329218107005
0.051440329218107005))))))) 

(p (p (p (p (- 0.154320987654321 (* 4 0.0001361166394067507))))))

(p (p (p (p (- 0.154320987654321 0.0005444665576270028)))))

(p (p (p (p 0.153776521096694))))

(p (p (p (- (* 3 0.153776521096694) (* 4 (cube 0.153776521096694))))))

(p (p (p (- 0.461329563290082 (* 4 (cube 0.153776521096694))))))

(p (p (p (- 0.461329563290082 (* 4 (* 0.153776521096694 0.153776521096694 0.153776521096694))))))

(p (p (p (- 0.461329563290082 (* 4 0.003636386985409362)))))

(p (p (p (- 0.461329563290082 0.014545547941637448))))

(p (p (p 0.4467840153484446)))

(p (p (- (* 3 0.4467840153484446) (* 4 (cube 0.4467840153484446)))))

(p (p (- 1.3403520460453338 0.3567408740600053)))

(p (p 0.9836111719853284))

(p (- (* 3 0.9836111719853284) (* 4 (cube 0.9836111719853284))))

(p (- 2.9508335159559853 (* 4 (cube 0.9836111719853284))))

(p (- 2.9508335159559853 (* 4 0.9516348950713809)))

(p (- 2.9508335159559853 3.8065395802855235))

(p -0.8557060643295382)

(- (* 3 -0.8557060643295382) (* 4 (cube -0.8557060643295382)))

(- -2.5671181929886147 (* 4 (cube -0.8557060643295382)))

(- -2.5671181929886147 (* 4 -0.6265761061028321))

(- -2.5671181929886147 -2.5063044244113284)

-0.060813768577286265

So, to answer question #1, the procedure 'p' is applied 5 times, when (sine 12.5) is evaluated.

For question #2, because of the division by 3.0 at the else case of the sine function and the
initial condition of the if clause, the number of steps and the amount of space required is directly
proportional to the value of a, hence, the order of growth of both is θ(n).

|#

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))
